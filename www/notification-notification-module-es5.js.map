{"version":3,"sources":["webpack:///src/app/notification/notification.page.html","webpack:///src/app/notification/notification-routing.module.ts","webpack:///src/app/notification/notification.module.ts","webpack:///src/app/notification/notification.page.scss","webpack:///src/app/notification/notification.page.ts","webpack:///src/app/services/account.service.ts"],"names":["routes","path","component","NotificationPageRoutingModule","imports","forChild","exports","NotificationPageModule","declarations","NotificationPage","navCtrl","alertCtrl","helper","plt","_router","accountProvider","notifications","fetchNotificationList","localStorage","getItem","then","res","selector","template","AccountProvider","http","loadingCtrl","serviceurl","user_id","create","message","loading","present","headers","Promise","resolve","reject","get","subscribe","dismiss","err","data","body","amount","post","providedIn"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKf,UAAMA,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,6BAA6B;AAAA;AAAA,Q;;AAA7BA,mCAA6B,6DAJzC,+DAAS;AACRC,eAAO,EAAE,CAAC,6DAAaC,QAAb,CAAsBL,MAAtB,CAAD,CADD;AAERM,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAIyC,GAA7BH,6BAA6B,CAA7B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCGAI,sBAAsB;AAAA;AAAA,Q;;AAAtBA,4BAAsB,6DATlC,+DAAS;AACRH,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,0FAJO,CADD;AAORI,oBAAY,EAAE,CAAC,mEAAD;AAPN,OAAT,CASkC,GAAtBD,sBAAsB,CAAtB;;;;;;;;;;;;;;;;ACnBb;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCYFE,gBAAgB;AAI3B,kCACUC,OADV,EAEUC,SAFV,EAGUC,MAHV,EAIUC,GAJV,EAKUC,OALV,EAMUC,eANV,EAM2C;AAAA;;AALjC,eAAAL,OAAA,GAAAA,OAAA;AACA,eAAAC,SAAA,GAAAA,SAAA;AACA,eAAAC,MAAA,GAAAA,MAAA;AACA,eAAAC,GAAA,GAAAA,GAAA;AACA,eAAAC,OAAA,GAAAA,OAAA;AACA,eAAAC,eAAA,GAAAA,eAAA;AARV,eAAAC,aAAA,GAAgB,EAAhB;AASK;;AAXsB;AAAA;AAAA,iBAa3B,oBAAW;AAAA;;AACT,iBAAKD,eAAL,CAAqBE,qBAArB,CAA2CC,YAAY,CAACC,OAAb,CAAqB,SAArB,CAA3C,EAA4EC,IAA5E,CAAiF,UAACC,GAAD,EAAS;AACxF,kBAAIA,GAAG,CAAC,QAAD,CAAH,IAAiB,CAArB,EAAwB;AACtB,qBAAI,CAACL,aAAL,GAAqBK,GAAG,CAAC,eAAD,CAAxB;AACD;AACF,aAJD;AAKD;AAnB0B;;AAAA;AAAA,S;;;;gBAVpB;;gBAAe;;gBADf;;gBACgC;;gBAEhC;;gBACA;;;;AAOIZ,sBAAgB,6DAL5B,gEAAU;AACTa,gBAAQ,EAAE,kBADD;AAETC,gBAAQ,EAAR;AAAA;AAAA,0GAFS;;;;AAAA,OAAV,CAK4B,GAAhBd,gBAAgB,CAAhB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCHAe,eAAe;AAGxB,iCACWC,IADX,EAEYC,WAFZ,EAGYhB,OAHZ,EAIWE,MAJX,EAIiC;AAAA;;AAHtB,eAAAa,IAAA,GAAAA,IAAA;AACC,eAAAC,WAAA,GAAAA,WAAA;AACA,eAAAhB,OAAA,GAAAA,OAAA;AACD,eAAAE,MAAA,GAAAA,MAAA,CAAsB,CANjC;;AACA,eAAAe,UAAA,GAAa,oDAAb;AAOK;AAEL;;;;;;;AAXwB;AAAA;AAAA,iBAgBlB,+BAAsBC,OAAtB,EAA+B;;;;;;;;;AACjB,2BAAM,KAAKF,WAAL,CAAiBG,MAAjB,CAAwB;AAC1CC,6BAAO,EAAE;AADiC,qBAAxB,CAAN;;;AAAVC,2B;;AAGN,2BAAMA,OAAO,CAACC,OAAR,EAAN;;;AAEIC,2B,GAAU,IAAI,gEAAJ,CAAgB,EAAhB,C;qDACP,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,4BAAI,CAACX,IAAL,CAAUY,GAAV,CAAc,MAAI,CAACV,UAAL,GAAkB,mBAAlB,GAAwCC,OAAtD,EAA+D;AAC3DK,+BAAO,EAAPA;AAD2D,uBAA/D,EAGKK,SAHL,CAGe,UAAAjB,GAAG,EAAI;AACdU,+BAAO,CAACQ,OAAR;AACAJ,+BAAO,CAACd,GAAD,CAAP;AACH,uBANL,EAMO,UAACmB,GAAD,EAAS;AACRT,+BAAO,CAACQ,OAAR;AACAH,8BAAM,CAACI,GAAD,CAAN;AACH,uBATL;AAUH,qBAXM,C;;;;;;;;AAYV;AAED;;;;;;AArCwB;AAAA;AAAA,iBA0CjB,iCAAwBZ,OAAxB,EAAiC;;;;;;;;;AACpB,2BAAM,KAAKF,WAAL,CAAiBG,MAAjB,CAAwB;AAC1CC,6BAAO,EAAE;AADiC,qBAAxB,CAAN;;;AAAVC,2B;;AAGN,2BAAMA,OAAO,CAACC,OAAR,EAAN;;;AAEIC,2B,GAAU,IAAI,gEAAJ,CAAgB,EAAhB,C;sDACP,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,4BAAI,CAACX,IAAL,CAAUY,GAAV,CAAc,MAAI,CAACV,UAAL,GAAkB,uBAAlB,GAA4CC,OAA1D,EAAmE;AAC/DK,+BAAO,EAAPA;AAD+D,uBAAnE,EAGKK,SAHL,CAGe,UAAAjB,GAAG,EAAI;AACdU,+BAAO,CAACQ,OAAR;AACAJ,+BAAO,CAACd,GAAD,CAAP;AACH,uBANL,EAMO,UAACmB,GAAD,EAAS;AACRT,+BAAO,CAACQ,OAAR;AACAH,8BAAM,CAACI,GAAD,CAAN;AACH,uBATL;AAUH,qBAXM,C;;;;;;;;AAYV;AAED;;;;;;AA/DwB;AAAA;AAAA,iBAoElB,0BAAiBC,IAAjB,EAAuB;;;;;;;;;AACT,2BAAM,KAAKf,WAAL,CAAiBG,MAAjB,CAAwB;AAC1CC,6BAAO,EAAE;AADiC,qBAAxB,CAAN;;;AAAVC,2B;;AAGN,2BAAMA,OAAO,CAACC,OAAR,EAAN;;;AAEIC,2B,GAAU,IAAI,gEAAJ,CAAgB;AAC1B,sCAAgB,mCADU;AAE1B,gCAAU;AAFgB,qBAAhB,C;AAKVS,wB,GAAO,YAAYD,IAAI,CAACE,MAAjB,GAA0B,WAA1B,GAAwCF,IAAI,CAACb,O;sDAEjD,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,4BAAI,CAACX,IAAL,CAAUmB,IAAV,CAAe,MAAI,CAACjB,UAAL,GAAkB,oBAAjC,EAAuDe,IAAvD,EAA6D;AACzDT,+BAAO,EAAPA;AADyD,uBAA7D,EAGKK,SAHL,CAGe,UAAAjB,GAAG,EAAI;AACdU,+BAAO,CAACQ,OAAR;AACAJ,+BAAO,CAACd,GAAD,CAAP;AACH,uBANL,EAMO,UAACmB,GAAD,EAAS;AACRT,+BAAO,CAACQ,OAAR;AACAH,8BAAM,CAACI,GAAD,CAAN;AACH,uBATL;AAUH,qBAXM,C;;;;;;;;AAYV;AA7FuB;;AAAA;AAAA,S;;;;gBARnB;;gBAEyC;;gBAA/B;;gBACV;;;;AAKIhB,qBAAe,6DAH3B,iEAAW;AACRqB,kBAAU,EAAE;AADJ,OAAX,CAG2B,GAAfrB,eAAe,CAAf","file":"notification-notification-module-es5.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button icon=\\\"arrow-back-outline\\\" defaultHref=\\\"/homenew\\\"></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Notification List</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div class=\\\"title_bar\\\">\\n    <h2 class=\\\"title\\\">List of notifications</h2>\\n  </div>\\n  <div class=\\\"order_list\\\">\\n    <ion-item *ngFor=\\\"let item of notifications\\\">\\n      <ion-label>\\n        <h3>{{item.notification_title}}</h3>\\n        <p><span class=\\\"bold_count\\\">{{item.notification_description}}</span></p>\\n        <p>{{item.created_at}}</p>\\n        \\n      </ion-label>\\n    </ion-item>\\n  </div>\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NotificationPage } from './notification.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: NotificationPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class NotificationPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NotificationPageRoutingModule } from './notification-routing.module';\n\nimport { NotificationPage } from './notification.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    NotificationPageRoutingModule\n  ],\n  declarations: [NotificationPage]\n})\nexport class NotificationPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24ucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\nimport { HelperProvider } from 'src/app/services/helper.service';\nimport { NavController, AlertController, Platform } from '@ionic/angular';\nimport { take } from 'rxjs/operators';\nimport { Router } from '@angular/router';\nimport { AccountProvider } from 'src/app/services/account.service';\n\n@Component({\n  selector: 'app-notification',\n  templateUrl: './notification.page.html',\n  styleUrls: ['./notification.page.scss'],\n})\nexport class NotificationPage implements OnInit {\n\n  notifications = [];\n  \n  constructor(\n    private navCtrl: NavController,\n    private alertCtrl: AlertController,\n    private helper: HelperProvider,\n    private plt: Platform,\n    private _router: Router,\n    private accountProvider : AccountProvider\n  ) { }\n\n  ngOnInit() {\n    this.accountProvider.fetchNotificationList(localStorage.getItem(\"user_id\")).then((res) => {\n      if (res[\"status\"] == 1) {\n        this.notifications = res[\"notifications\"];\n      }\n    })\n  }\n\n}\n","import { combineAll } from 'rxjs/operators';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Platform, NavController, MenuController, LoadingController } from '@ionic/angular';\nimport { HelperProvider } from 'src/app/services/helper.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccountProvider {\n    // serviceurl = \"http://liquiditybars.com/canada/backend/admin/api\";\n    serviceurl = \"http://liquiditybars.com/canada/backend/admin/api/\";\n    constructor(\n        public http: HttpClient,\n        private loadingCtrl: LoadingController,\n        private navCtrl: NavController,\n        public helper: HelperProvider,\n\n    ) { }\n\n    /**\n     * This method is for fetching notification list\n     * @param user_id \n     * @returns \n     */\n    async fetchNotificationList(user_id) {\n        const loading = await this.loadingCtrl.create({\n            message: 'Loading...'\n        });\n        await loading.present();\n\n        let headers = new HttpHeaders({});\n        return new Promise((resolve, reject) => {\n            this.http.get(this.serviceurl + 'notificationList/' + user_id, {\n                headers\n            })\n                .subscribe(res => {\n                    loading.dismiss();\n                    resolve(res);\n                }, (err) => {\n                    loading.dismiss();\n                    reject(err);\n                });\n        });\n    }\n\n    /**\n     * This method is for fetching walllet transaction list\n     * @param user_id \n     * @returns \n     */\n     async fetchWalletTransactions(user_id) {\n        const loading = await this.loadingCtrl.create({\n            message: 'Loading...'\n        });\n        await loading.present();\n\n        let headers = new HttpHeaders({});\n        return new Promise((resolve, reject) => {\n            this.http.get(this.serviceurl + 'fetch_wallet_balance/' + user_id, {\n                headers\n            })\n                .subscribe(res => {\n                    loading.dismiss();\n                    resolve(res);\n                }, (err) => {\n                    loading.dismiss();\n                    reject(err);\n                });\n        });\n    }\n\n    /**\n     * This method is for adding wallet balance\n     * @param data\n     * @returns \n     */\n    async addWalletBalance(data) {\n        const loading = await this.loadingCtrl.create({\n            message: 'Loading...'\n        });\n        await loading.present();\n\n        let headers = new HttpHeaders({\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Accept': 'application/json'\n        });\n\n        let body = 'amount=' + data.amount + '&user_id=' + data.user_id;\n\n        return new Promise((resolve, reject) => {\n            this.http.post(this.serviceurl + \"add_wallet_balance\", body, {\n                headers\n            })\n                .subscribe(res => {\n                    loading.dismiss();\n                    resolve(res);\n                }, (err) => {\n                    loading.dismiss();\n                    reject(err);\n                });\n        });\n    }\n}\n"]}